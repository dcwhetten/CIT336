<?php
class User
{
	var $id;
	var $email;
	var $passwordHash;
	var $firstName;
	var $lastName;
	var $roleId;
}


function getallusers() {
    global$db;
    $query = 'SELECT email,userID, userName, firstName, lastName, role FROM user WHERE 1||0';

    try {
        $statement = $db->prepare($query);
        $statement->execute();
        $result = $statement->fetchAll();
        $statement->closeCursor();
        return $result;
    } catch (Exception $exc) {
        header('location: ./views/error.php');
        exit;
    }
}

function LoggedInUserIsAdmin() {
    return array_key_exists('UserRole', $_SESSION) && $_SESSION['UserRole'] == ROLE_ID_ADMIN;
}

function SetUserSessionVariables(User $user) {
    $_SESSION['UserId'] = $user->id;
    $_SESSION['UserRole'] = $user->roleId;
}

function GetLoggedInUserId() {
    return (array_key_exists('UserId', $_SESSION)) ? $_SESSION['UserId'] : null;
}

function CheckSession() {
    return(GetLoggedInUserId() != null);
}

function GetUser($userId) {
    global $db;
    $sql = 'SELECT * FROM users WHERE userID=:id';
    try {
        $stmt = $db->prepare($sql);
        $stmt->bindValue(':id', $userID);
        $stmt->execute();
        $result = $stmt->fetch();
        $stmt->closeCursor();
    } catch (PDOException $exc) {
        header('location: ./error.php');
    exit;
       if(array_key_exists(0, $result)) {
            $user = new User();
            $user->id = $result[0]['userID'];
            $user->email = $result[0]['email'];
            $user->firstName = $result[0]['firstName'];
            $user->lastName = $result[0]['lastName'];
            $user->roleId = $result[0]['role'];

            return $user;
    
}}}

        function LoginUser($email, $password) {
            global$db;
            $loggedIn = false;

            if ($email && $password) {
                $sql = "SELECT * FROM users WHERE email=:email AND password=:password";
                try {
                    $stmt = $db->prepare($sql);
                    $stmt->bindValue(':email', $email);
                    $stmt->bindValue(':password', $password);
                    $stmt->execute();
                    $result = $stmt->fetch();
                    $stmt->closeCursor();
                } catch (PDOException $exc) {
                    header('location: ./error.php');
                    exit;
                }
                if (is_array($result) && array_key_exists(0, $result)) {
                    $user = new User();
                    $user->id = $result[0]['Id'];
                    $user->roleId = $result[0]['roleId'];
                    SetUserSessionVariables($user);
                    $loggedIn = true;
                }
           

            return $loggedIn;
    }}
        
    function RegisterUser($first, $last, $email, $pass1, $pass2, &$message) {
	$registered = false;
	
	if (ValidateNames($first, $message) &&
		ValidateNames($last, $message) &&
		ValidateEmail($email, $message) &&
		ValidatePasswordLength($pass1, $message)) {
		if ($pass1 == $pass2) {
			$query = "SELECT * FROM users WHERE email=':email'";
			$result = DbSelect($query, array(':email' => $email));
			
			if (is_array($result) && count($result) == 0) {
				$hash = CalculatePasswordHash($pass1);
				$query = "INSERT INTO users(firstname, lastname, email, passwordhash, roleId)";
				$query .= " VALUES(:first, :last, :email, :pass, :role)";
				
				$id = DbInsert($query, array(':first' => $first, ':last' => $last, ':email' => $email, ':pass' => $hash, ':role' => ROLE_ID_USER));
				$u = new User();
				$u->id = $id;
				$u->roleId = null;
				SetUserSessionVariables($u);
				$registered = true;
			}
		}
		else
		{
			$message .= "Password and Verify Password must match.";
		}
	}
	
	return $registered;
}
function ValidateEmail($email, &$message) {
	
	if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
		return true;
	}
	
	$message .= "Invalid Email address";
	return false;
}
function ValidatePasswordLength($name, &$message) {
	
	
	if (strlen($name) >= 5) {
		return true;	
	} else {
		$message .= "Password must be at least 5 characters long";
		return false;
	} 
}
